training <- segmentationOriginal[,inTrain]
training <- segmentationOriginal[inTrain,]
testing  <- segmentationOriginal[-inTrain,]
set.seed(125)
dim(training)
nam <- names(training)
nam
modelFit <- train(CART ~ ., data=training,method = "rpart")
?AppliedPredictiveModeling
scriptLocation()
hist(train$CASE)
str(train)
str(training)
?segmentationOriginal
ls()
training <- subset(segmentationOriginal,segmentationOriginal$Case=="Ttain")
training <- subset(segmentationOriginal,segmentationOriginal$Case=="Train")
testing  <- subset(segmentationOriginal,segmentationOriginal$Case=="Test")
modelFit <- train(Class ~ ., data=training,method = "rpart")
modelFit
predictions <- predict(modelFit,testing)
table(predictions)
predictions <- predict(modelFit,TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
predictions <- predict(modelFit,TotalIntench2 = 23,000,FiberWidthCh1 = 10,PerimStatusCh1=2)
grep("23000",testing$TotalIntench2)
grep("23,000",testing$TotalIntench2)
modelFit$finalmodel
modelFit$finalModel
plot(modelFit$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
dim(trainSA)
str(trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",family="binomial",data=trainSA)
library(caret)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",family="binomial",data=trainSA)
summary(modelFit)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
pretr <- predict(modelFit,age,alcohol,obesity,tobacco,typea,ldl,data=trainSA)
pretr <- predict(modelFit,c(age,alcohol,obesity,tobacco,typea,ldl,data=trainSA))
pretr <- predict(modelFit,trainSA$age)
str(trainSA)
pretr <- predict(modelFit,newdata=trainSA$age)
pretr <- predict(modelFit,newdata=c(trainSA$age))
ndt <- trainSA[,c(2,3,6,7,8,9,10)]
str(ndt)
ndt <- trainSA[,c(2,3,6,7,8,9)]
predict(modelFit,newdata=ndt)
ndtest <- testSA[,c(2,3,6,7,8,9)]
missClass(trainSA$chd,predict(modelFit,newdata=ndt))
missClass(testSA$chd,predict(modelFit,newdata=ndtest))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
dim(vowel.train)
dim(vowel.test)
str(vowel.train)
modelFit <- train(factor(y)~.,data=vowel.train,method="rf",prox=TRUE)
modelFit <- train(factor(y)~.,data=vowel.train,method="rf",prox=TRUE)
summary(modelFit)
modelFit$finalModel
?varImp
varImp(modelFit)
set.seed(33833)
modelFit <- train(factor(y)~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modelFit)
?varImp
modelFit <- train(factor(y)~.,data=vowel.train,method="rf")
varImp(modelFit)
plot(modelFit)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("gbm")
library(gbmp)
library(gbm)
set.seed(62423)
set.seed(62433)
modelFitrf <- train(diagnosis ~ . ,method="rf",data=training)
modelFitgb <- train(diagnosis ~ . , method="gbm",data=training)
modelFitld <- train(diagnosis ~ . , method="lda",data=training)
summary(modelFitld)
modelFitld$finalModel
prf <- predict(modelFitrf,testing)
pgb <- predict(modelFitgb,testing)
pld <- predict(modelFitld,testing)
table(prf==testing$diagnosis)
table(pgb==testing$diagnosis)
table(pld==testing$diagnosis)
combi <- data.frame(prf,pgb,pld,diagnosis=testing$diagnosis)
str(combi)
modelFitcm <- train(diagnosis~.,method="gam",data=combi)
edit(combi)
library(mgcv)
library(nlme)
modelFitcm <- train(diagnosis~.,method="gam",data=combi)
pco <- predict(modelFitcm,combi)
table(pco==testing$diagnosis)
table(pco==combi$diagnosis)
table(combi$diagnosis==testing$diagnosis)
66/82
65/82
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modelFit <- train(CompressiveStrength ~ .,method="lasso")
modelFit <- train(CompressiveStrength ~ .,method="lasso",data=training)
summary(modelFit)
plot(modelFit)
?plot.enet
plot.enet(modelFit)
?enet
str(training)
enet(training[1:8],training[9],lambda=0)
enet(training[,1:8],training[,9],lambda=0)
summary(modelFit)
modelFit$finalModel
str(training)
summary(modelFit)
modelFit$actions
modelFit$allset
modelFit$lambda
lambda
modelFit[1]
modelFit[2]
modelFit[3]
modelFit[4]
modelFit[5]
modelFit[6]
modelFit[7]
modelFit[8]
modelFit[9]
modelFit[10]
modelFit[11]
modelFit[12]
modelFit[13]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
plot(training$Cement,training$CompressiveStrength)
library(Hmisc)
plot(training$CompressiveStrength,col=cut2(training[,1],g=5))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
hist(FlyAsh)
hist(training$FlyAsh)
summary(training$FlyAsh)
summary(log(training$FlyAsh+1))
hist(log(training$FlyAsh+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
dim(training)
grep("^IL",names(training))
il <- grep("^IL",names(training))
modelFit <- train(training[,il],method="pca",thresh=0.8)
preProc <- preProcess(training[,il],method="pca",thresh=0.8)
summary(preProc)
preProc$finalmodel
preProc$finalModel
preProc$thresh
preProc
source('C:/Users/Henry/Desktop/rprog/rprog/sample.R')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
?numeric
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=training)
plot(training$CompressiveStrength)
clist <- cut2(training$Cement,5)
library(Hmisc)
clist <- cut2(training$Cement,5)
plot(training$CompressiveStrength,col=clist)
clist
?cut2
clist <- cut2(training$Cement,g=5)
plot(training$CompressiveStrength,col=clist)
?training
str(training)
clist <- cut2(training$BlastFurnaceSlag,g=5)
?training
plot(training$CompressiveStrength,col=clist)
clist <- cut2(training$FlyAsh,g=5)
plot(training$CompressiveStrength,col=clist)
clist <- cut2(training$Watere,g=5)
clist <- cut2(training$Water,g=5)
plot(training$CompressiveStrength,col=clist)
str(training)
clist <- cut2(training$Superplasticizer,g=5)
plot(training$CompressiveStrength,col=clist)
clist <- cut2(training$CoarseAggregate,g=5)
plot(training$CompressiveStrength,col=clist)
clist <- cut2(training$FineAggregate,g=5)
plot(training$CompressiveStrength,col=clist)
clist <- cut2(training$Age,g=5)
plot(training$CompressiveStrength,col=clist)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
vlist <- grep("^IL",names(training))
prin <- preProcess(training[,vlist],method="pca",thresh=0.8)
prin
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
modFit1 <- train(training$diagnosis ~ training[,vlist],method="glm")
trainingIL <- training[,c(1,vlist)]
testingIL  <- testing[,c(1,vlist)]
head(testingIL)
modFit1 <- train(diagnosis ~ .,method="glm")
modFit1 <- train(diagnosis ~ .,data=trainingIL,method="glm")
ans1 <- predict(modFit1,testingIL)
length(ans1)
sum(ans1 == testingIL$diagnosis)
sum(ans1 == testingIL$diagnosis)/length(ans1)
modFit2 <- preProcess(trainIL,method="pca",thresh=0.8)
modFit2 <- preProcess(trainingIL,method="pca",thresh=0.8)
modFit2 <- preProcess(trainingIL[-1],method="pca",thresh=0.8)
modFit3 <- train(diagnosis~modFit2,data=trainingIL,method="glm")
modFit2 <- train(diagnosis ~ .,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
warnings()
preProc <- preProcess(trainingIL[-1],method="pca",thresh=0.8)
preProc
trainPC <- predict(preProc,trainingIL[-1])
modFitx <- train(trainingIL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testingIL[-1])
confusionMatrix(testingIL$diagnosis,predict(modFitx,testPC))
pp <- preProcess(trainingIL[-1],method="pca",thresh=0.9)
pp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
summary(log(training$Superplasticizer))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
str(segmentationOriginal)
dim(segmentationOriginal)
training <- subset(segmentationOriginal,segmentationOriginal$Case=="Train")
testing  <- subset(segmentationOriginal,segmentationOriginal$Case=="Test")
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit
modFit$finalModel
savehistory("C:/Users/Henry/Desktop/rprog/ml/20150506.history")
q()
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(area ~ .,method="rf",data=olive)
library(caret)
modFit <- train(area ~ .,method="rpart",data=olive)
str(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
modFit
modFit$finalModel
print(modFit$finalModel)
prer <- predict(modFit,newdata = as.data.frame(t(colMeans(olive))))
prer
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
clist <- c(2,3,6,7,8,9,10)
modFit <- train(trainSA[,10]~trainSA[,2,3,6,7,8,9],method="glm",familiy="binomial")
modFit <- train(trainSA[,10]~trainSA[,c(2,3,6,7,8,9)],method="glm",familiy="binomial")
trainSAx <- trainSA[,clist]
testSAx  <- trainSA[,clist]
modFit <- train(chd ~ .,method="glm",family="binomial",data=trainSAx)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSAx))
missClass(trainSA$chd,predict(modFit,trainSAx))
missClass(testSA$chd,predict(modFit,testSAx))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
dim(vowel.train)
summary(vowel.train$y)
vowel.train$y <- as.factor(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
classifier <- randomForest(x=vowel.train[,2:11],y=vowel.train$y,importance=TRUE)
library(randomForest)
classifier <- randomForest(x=vowel.train[,2:11],y=vowel.train$y,importance=TRUE)
print(importance(classifier))
with(vowel.train,plot(x.1,y))
with(vowel.train,plot(x.2,y))
with(vowel.train,plot(x.3,y))
with(vowel.train,plot(x.4,y))
with(vowel.train,plot(x.5,y))
with(vowel.train,plot(x.6,y))
with(vowel.train,plot(x.7,y))
with(vowel.train,plot(x.8,y))
with(vowel.train,plot(x.9,y))
with(vowel.train,plot(x.10,y))
pairs(vowel.train[2:11])
q()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shiny")
library(shiny)
q()
install.packages("rcpp")
install.packages("Rcpp")
library(Rcpp)
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev')
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev')
q()
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev/fs')
q()
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev/fs')
dat <- rnorm(100,mean=0,sd=1)
hist(dat,xlab='x',col='lightblue',main='histgram')
lines(c(0,0),c(0,200),col="red",lwd=5)
text(63,150,paste("mu=",mu1))
text(63,150,paste("mu=",0))
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev/fs')
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev/fs')
setwd("../Desktop/rprog/dev/slidify/first_deck/first_deck/")
library(slidify)
rm(list=ls())
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
nsamp <- 1000000
x <- rnorm(nsamp,mu=0,sd=1)
x <- rnorm(nsamp,mean=0,sd=1)
y <- rnorm(nsamp,mean=10,sd=2)
av <- mean(x,y)
av <- (x+y)*.5
hist(av)
mean(av)
sd(av)
y <- rnorm(nsamp,mean=10,sd=2)
y <- rnorm(nsamp,mean=20,sd=2)
av <- (x+y)*.5
hist(av)
mean(av)
sd(av)
shiny::runApp('C:/Users/Henry/Desktop/rprog/dev/blendnormal')
slidify("index.Rmd")
browseURL("index.html")
